name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy

      - name: Format check (black)
        run: black --check .

      - name: Lint check (flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type check (mypy)
        run: mypy . --ignore-missing-imports || true

  # Testing
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: continuum_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/continuum_test
          REDIS_URL: redis://localhost:6379/0
          CACHE_TYPE: redis
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build & Push Docker Image
  build:
    needs: [code-quality, test]
    runs-on: ubuntu-latest
    name: Build Docker Image
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    needs: [build, security]
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.continuum.example.com

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to staging cluster
        env:
          KUBECONFIG: ${{ secrets.STAGING_KUBECONFIG }}
        run: |
          kubectl rollout restart deployment/continuum -n continuum
          kubectl rollout status deployment/continuum -n continuum --timeout=5m

  # Deploy to Production
  deploy-production:
    needs: [build, security]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://continuum.example.com

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to production cluster
        env:
          KUBECONFIG: ${{ secrets.PRODUCTION_KUBECONFIG }}
        run: |
          kubectl rollout restart deployment/continuum -n continuum
          kubectl rollout status deployment/continuum -n continuum --timeout=10m

      - name: Create deployment notification
        run: |
          echo "Deployment to production completed successfully"
          echo "Version: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

  # Notification
  notify:
    runs-on: ubuntu-latest
    name: Notification
    if: always()
    needs: [code-quality, test, build, security]

    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.code-quality.result }}" == "failure" ] || \
             [ "${{ needs.test.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ] || \
             [ "${{ needs.security.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            CI/CD Pipeline ${{ steps.status.outputs.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
