apiVersion: apps/v1
kind: Deployment
metadata:
  name: continuum
  namespace: continuum
  labels:
    app: continuum
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: continuum
  template:
    metadata:
      labels:
        app: continuum
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: continuum
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      initContainers:
        # Wait for PostgreSQL to be ready
        - name: wait-for-db
          image: busybox:latest
          command:
            - sh
            - -c
            - |
              until nc -z postgres 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done

      containers:
        - name: continuum
          image: continuum:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 8001
              protocol: TCP

          # Environment from ConfigMap
          envFrom:
            - configMapRef:
                name: continuum-config
            - secretRef:
                name: continuum-secrets

          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2

          # Resource limits
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL

          # Volume mounts
          volumeMounts:
            - name: logs
              mountPath: /app/logs

      # Volumes
      volumes:
        - name: logs
          emptyDir: {}

      # Pod disruption budget for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - continuum
                topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: continuum
  namespace: continuum
  labels:
    app: continuum
spec:
  type: ClusterIP
  selector:
    app: continuum
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: metrics
      port: 8001
      targetPort: 8001
      protocol: TCP
  sessionAffinity: ClientIP

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: continuum-pdb
  namespace: continuum
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: continuum

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: continuum-hpa
  namespace: continuum
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: continuum
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ServiceAccount
metadata:
  name: continuum
  namespace: continuum

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: continuum
  namespace: continuum
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: continuum
  namespace: continuum
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: continuum
subjects:
  - kind: ServiceAccount
    name: continuum
    namespace: continuum
